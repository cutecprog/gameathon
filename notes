Conway's game of life on a finite rolling square plane. A text file represents
current generation as a character matrix the size of the game's plane. Player
is a live cell that may move to neighbor dead cells in one generation. Moving
into neighbor live cell takes zero generations and increases players hp by
one. When player moves off this cell it is dead. Player can lose one hp so that
when they move off the cell will remain alive: this entire action takes zero
generations. If current player cell becomes dead then player loses one hp then
player can move taking the normal one generation and leaving the cell dead. If
current player cell becomes alive then player gains one hp and moving off would
leave the cell dead.

Any live cell with fewer than two live neighbors dies. Any live cell with two,
or three live neighbors lives. Any live cells with more than three live
neighbors dies. Any dead cell with three live neighbors lives.

DataFile(file)
        __init__(filename, sep = False)
        __del__
                self.close()
        read
                if sep
                        return super(DataFile, self).read().split(self.sep)
                return super(DataFile, self).read()
        add(value)
                if sep
                        self.write(self.sep + value)
        remove(value)
                if sep
                        self.write(self.read().replace(self.sep + value, ''))
        insert(pos, ch)
                if sep
                        return
                data = self.read()
                data[pos] = ch
                self.write(data)

Session
        __init__(size, filename = '')
                self.world = DataFile(filename+'.world')
                self._turn = DataFile(filename+'.turn', ',')
                self.session_turn = self.turn.read()[0]
                self.id = `date +%s`
        _step_turn()
                if len(self._turn) == 1
                        self._turn.write(int(self._turn.read()) + 1)
        toggle_hold():
                if self.id in self._turn.read()
                        self._turn.remove(self.id)
                else
                        self._turn.add(self.id)
        is_turn()
                current_turn = self._turn.read()[0]
                if self.session_turn < current_turn
                        self.session_turn = current_turn
                        return True
                return False
